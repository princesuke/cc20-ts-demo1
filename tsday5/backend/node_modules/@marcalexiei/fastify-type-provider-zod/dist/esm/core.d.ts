import type { SwaggerTransform, SwaggerTransformObject } from "@fastify/swagger";
import type { FastifyPluginAsync, FastifyPluginCallback, FastifyPluginOptions, FastifySchema, FastifySchemaCompiler, FastifyTypeProvider, RawServerBase, RawServerDefault } from "fastify";
import type { FastifySerializerCompiler } from "fastify/types/schema.js";
import type { $ZodRegistry, input, output } from "zod/v4/core";
import { $ZodType } from "zod/v4/core";
export interface ZodTypeProvider extends FastifyTypeProvider {
	validator: this["schema"] extends $ZodType ? output<this["schema"]> : unknown;
	serializer: this["schema"] extends $ZodType ? input<this["schema"]> : unknown;
}
interface Schema extends FastifySchema {
	hide?: boolean;
}
interface CreateJsonSchemaTransformOptions {
	skipList?: ReadonlyArray<string>;
	schemaRegistry?: $ZodRegistry<{
		id?: string | undefined;
	}>;
}
export declare const createJsonSchemaTransform: ({ skipList, schemaRegistry }: CreateJsonSchemaTransformOptions) => SwaggerTransform<Schema>;
export declare const jsonSchemaTransform: SwaggerTransform<Schema>;
interface CreateJsonSchemaTransformObjectOptions {
	schemaRegistry?: $ZodRegistry<{
		id?: string | undefined;
	}>;
}
export declare const createJsonSchemaTransformObject: (options: CreateJsonSchemaTransformObjectOptions) => SwaggerTransformObject;
export declare const jsonSchemaTransformObject: SwaggerTransformObject;
export declare const validatorCompiler: FastifySchemaCompiler<$ZodType>;
export interface ZodSerializerCompilerOptions {
	replacer?: (this: any, key: string, value: any) => any;
}
type ZodFastifySerializerCompiler = FastifySerializerCompiler<$ZodType | {
	properties: $ZodType;
}>;
export declare const createSerializerCompiler: (options?: ZodSerializerCompilerOptions) => ZodFastifySerializerCompiler;
export declare const serializerCompiler: ZodFastifySerializerCompiler;
/**
* FastifyPluginCallbackZod with Zod automatic type inference
*
* @example
* ```typescript
* import { FastifyPluginCallbackZod } from "@marcalexiei/fastify-type-provider-zod"
*
* const plugin: FastifyPluginCallbackZod = (fastify, options, done) => {
*   done()
* }
* ```
*/
export type FastifyPluginCallbackZod<
	Options extends FastifyPluginOptions = Record<never, never>,
	Server extends RawServerBase = RawServerDefault
> = FastifyPluginCallback<Options, Server, ZodTypeProvider>;
/**
* FastifyPluginAsyncZod with Zod automatic type inference
*
* @example
* ```typescript
* import { FastifyPluginAsyncZod } from "@marcalexiei/fastify-type-provider-zod"
*
* const plugin: FastifyPluginAsyncZod = async (fastify, options) => {
* }
* ```
*/
export type FastifyPluginAsyncZod<
	Options extends FastifyPluginOptions = Record<never, never>,
	Server extends RawServerBase = RawServerDefault
> = FastifyPluginAsync<Options, Server, ZodTypeProvider>;
export {};
