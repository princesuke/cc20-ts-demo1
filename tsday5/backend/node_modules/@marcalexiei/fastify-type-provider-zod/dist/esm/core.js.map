{"version":3,"file":"core.js","sources":["../../src/core.ts"],"sourcesContent":["import type {\n  SwaggerTransform,\n  SwaggerTransformObject,\n} from '@fastify/swagger';\nimport type {\n  FastifyPluginAsync,\n  FastifyPluginCallback,\n  FastifyPluginOptions,\n  FastifySchema,\n  FastifySchemaCompiler,\n  FastifyTypeProvider,\n  RawServerBase,\n  RawServerDefault,\n} from 'fastify';\n// When https://github.com/fastify/fastify/pull/6207 is released when can import from fastify\nimport type { FastifySerializerCompiler } from 'fastify/types/schema.js';\nimport type { $ZodRegistry, input, output } from 'zod/v4/core';\nimport { $ZodType, globalRegistry, safeParse } from 'zod/v4/core';\n\nimport {\n  createValidationError,\n  InvalidSchemaError,\n  ResponseSerializationError,\n} from './errors.ts';\nimport { getOpenAPISchemaVersion } from './openapi.ts';\nimport {\n  removeUnusedRefs,\n  zodRegistryToJson,\n  zodSchemaToJson,\n} from './zod-to-json.ts';\n\nconst defaultSkipList = [\n  '/documentation/',\n  '/documentation/initOAuth',\n  '/documentation/json',\n  '/documentation/uiConfig',\n  '/documentation/yaml',\n  '/documentation/*',\n  '/documentation/static/*',\n];\n\nexport interface ZodTypeProvider extends FastifyTypeProvider {\n  validator: this['schema'] extends $ZodType ? output<this['schema']> : unknown;\n  serializer: this['schema'] extends $ZodType ? input<this['schema']> : unknown;\n}\n\ninterface Schema extends FastifySchema {\n  hide?: boolean;\n}\n\ninterface CreateJsonSchemaTransformOptions {\n  skipList?: ReadonlyArray<string>;\n  schemaRegistry?: $ZodRegistry<{ id?: string | undefined }>;\n}\n\nexport const createJsonSchemaTransform = ({\n  skipList = defaultSkipList,\n  schemaRegistry = globalRegistry,\n}: CreateJsonSchemaTransformOptions): SwaggerTransform<Schema> => {\n  // biome-ignore lint/complexity/noExcessiveCognitiveComplexity: no other way\n  return (transformData) => {\n    if ('swaggerObject' in transformData) {\n      throw new Error(\n        'createJsonSchemaTransform - OpenAPI 2.0 is not supported',\n      );\n    }\n\n    const { schema, url } = transformData;\n\n    if (!schema) {\n      return { schema, url };\n    }\n\n    const { response, headers, querystring, body, params, hide, ...rest } =\n      schema;\n\n    const transformed: {\n      response?: Record<string, unknown>;\n      hide?: boolean;\n      [key: string]: unknown;\n    } = {};\n\n    if (skipList.includes(url) || hide) {\n      transformed.hide = true;\n      return { schema: transformed, url };\n    }\n\n    type ZodSchemaRecord = Record<string, $ZodType>;\n\n    const zodSchemas = {\n      headers,\n      querystring,\n      body,\n      params,\n    } as ZodSchemaRecord;\n\n    const openAPISchemaVersion = getOpenAPISchemaVersion(transformData);\n\n    for (const prop in zodSchemas) {\n      const zodSchema = zodSchemas[prop];\n      if (zodSchema) {\n        transformed[prop] = zodSchemaToJson(\n          zodSchema,\n          schemaRegistry,\n          'input',\n          openAPISchemaVersion,\n        );\n      }\n    }\n\n    if (response) {\n      transformed.response = {};\n\n      for (const prop in response) {\n        const zodSchema = resolveSchema((response as ZodSchemaRecord)[prop]);\n\n        transformed.response[prop] = zodSchemaToJson(\n          zodSchema,\n          schemaRegistry,\n          'output',\n          openAPISchemaVersion,\n        );\n      }\n    }\n\n    for (const prop in rest) {\n      const meta = rest[prop as keyof typeof rest];\n      if (meta) {\n        transformed[prop] = meta;\n      }\n    }\n\n    return { schema: transformed, url };\n  };\n};\n\nexport const jsonSchemaTransform: SwaggerTransform<Schema> =\n  createJsonSchemaTransform({});\n\ninterface CreateJsonSchemaTransformObjectOptions {\n  schemaRegistry?: $ZodRegistry<{ id?: string | undefined }>;\n}\n\nexport const createJsonSchemaTransformObject = (\n  options: CreateJsonSchemaTransformObjectOptions,\n): SwaggerTransformObject => {\n  const { schemaRegistry = globalRegistry } = options ?? {};\n\n  return (documentObject) => {\n    /* v8 ignore next 5 */\n    if ('swaggerObject' in documentObject) {\n      throw new Error(\n        'createJsonSchemaTransformObject - OpenAPI 2.0 is not supported',\n      );\n    }\n\n    const openAPISchemaVersion = getOpenAPISchemaVersion(documentObject);\n\n    const inputSchemas = zodRegistryToJson(\n      schemaRegistry,\n      'input',\n      openAPISchemaVersion,\n    );\n    const outputSchemas = zodRegistryToJson(\n      schemaRegistry,\n      'output',\n      openAPISchemaVersion,\n    );\n\n    for (const key in outputSchemas) {\n      /* v8 ignore next 5 */\n      if (inputSchemas[key]) {\n        throw new Error(\n          `Collision detected for schema \"${key}\". The is already an input schema with the same name.`,\n        );\n      }\n    }\n\n    return removeUnusedRefs({\n      ...documentObject.openapiObject,\n      components: {\n        ...documentObject.openapiObject.components,\n        schemas: {\n          ...documentObject.openapiObject.components?.schemas,\n          ...inputSchemas,\n          ...outputSchemas,\n        },\n      },\n    }) as ReturnType<SwaggerTransformObject>;\n  };\n};\n\nexport const jsonSchemaTransformObject: SwaggerTransformObject =\n  createJsonSchemaTransformObject({});\n\nexport const validatorCompiler: FastifySchemaCompiler<$ZodType> = ({\n  schema: maybeSchema,\n}) => {\n  return (data) => {\n    const schema = resolveSchema(maybeSchema);\n\n    const result = safeParse(schema, data);\n    if (result.error) {\n      return { error: createValidationError(result.error) as unknown as Error };\n    }\n\n    return { value: result.data };\n  };\n};\n\nfunction resolveSchema(\n  maybeSchema: $ZodType | { properties: $ZodType },\n): $ZodType {\n  if (maybeSchema instanceof $ZodType) {\n    return maybeSchema;\n  }\n\n  // I'm not sure about the need of this code.\n  // Unit tests are not failing without it so keep it here for reference\n  // if (\n  //   'properties' in maybeSchema &&\n  //   maybeSchema.properties instanceof $ZodType\n  // ) {\n  //   return maybeSchema.properties;\n  // }\n\n  throw new InvalidSchemaError(JSON.stringify(maybeSchema));\n}\n\n// biome-ignore-start lint/suspicious/noExplicitAny: Same as json stringify\n// #region ZodSerializerCompilerOptions\nexport interface ZodSerializerCompilerOptions {\n  replacer?: (this: any, key: string, value: any) => any;\n}\n// #endregion ZodSerializerCompilerOptions\n// biome-ignore-end lint/suspicious/noExplicitAny: Same as json stringify\n\ntype ZodFastifySerializerCompiler = FastifySerializerCompiler<\n  $ZodType | { properties: $ZodType }\n>;\n\nexport const createSerializerCompiler: (\n  options?: ZodSerializerCompilerOptions,\n) => ZodFastifySerializerCompiler = (options) => {\n  return ({ schema: maybeSchema, method, url }) => {\n    return (data) => {\n      const schema = resolveSchema(maybeSchema);\n\n      const result = safeParse(schema, data);\n      if (result.error) {\n        throw new ResponseSerializationError(method, url, {\n          cause: result.error,\n        });\n      }\n\n      return JSON.stringify(result.data, options?.replacer);\n    };\n  };\n};\n\nexport const serializerCompiler: ZodFastifySerializerCompiler =\n  createSerializerCompiler();\n\n/**\n * FastifyPluginCallbackZod with Zod automatic type inference\n *\n * @example\n * ```typescript\n * import { FastifyPluginCallbackZod } from \"@marcalexiei/fastify-type-provider-zod\"\n *\n * const plugin: FastifyPluginCallbackZod = (fastify, options, done) => {\n *   done()\n * }\n * ```\n */\nexport type FastifyPluginCallbackZod<\n  Options extends FastifyPluginOptions = Record<never, never>,\n  Server extends RawServerBase = RawServerDefault,\n> = FastifyPluginCallback<Options, Server, ZodTypeProvider>;\n\n/**\n * FastifyPluginAsyncZod with Zod automatic type inference\n *\n * @example\n * ```typescript\n * import { FastifyPluginAsyncZod } from \"@marcalexiei/fastify-type-provider-zod\"\n *\n * const plugin: FastifyPluginAsyncZod = async (fastify, options) => {\n * }\n * ```\n */\nexport type FastifyPluginAsyncZod<\n  Options extends FastifyPluginOptions = Record<never, never>,\n  Server extends RawServerBase = RawServerDefault,\n> = FastifyPluginAsync<Options, Server, ZodTypeProvider>;\n"],"names":[],"mappings":"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"}