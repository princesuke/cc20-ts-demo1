{"version":3,"file":"openapi.cjs","sources":["../../src/openapi.ts"],"sourcesContent":["import type { OpenAPIV3, OpenAPIV3_1 } from 'openapi-types';\nimport type { JSONSchema } from 'zod/v4/core';\n\nexport type OpenAPISchemaVersion = '3.0' | '3.1';\n\nexport const getOpenAPISchemaVersion = (documentObject: {\n  openapiObject: Partial<OpenAPIV3.Document | OpenAPIV3_1.Document>;\n}): OpenAPISchemaVersion => {\n  const openapiVersion = documentObject.openapiObject.openapi;\n\n  if (openapiVersion?.startsWith('3.1')) {\n    return '3.1';\n  }\n\n  if (openapiVersion?.startsWith('3.0')) {\n    return '3.0';\n  }\n\n  /* v8 ignore next 2 */\n  throw new Error('Unsupported OpenAPI document object');\n};\n\nexport const convertSchemaToOpenAPISchemaVersion = (\n  jsonSchema: JSONSchema.BaseSchema,\n  options: { openAPISchemaVersion: OpenAPISchemaVersion },\n  // biome-ignore lint/complexity/noExcessiveCognitiveComplexity: life is bitter :(\n): JSONSchema.BaseSchema => {\n  const { openAPISchemaVersion } = options;\n\n  const clone = { ...jsonSchema };\n\n  if (openAPISchemaVersion === '3.1') {\n    delete clone.$id;\n    delete clone.$schema;\n\n    return clone;\n  }\n\n  // if (clone.type === 'null') {\n  //   clone.nullable = true;\n  //   delete clone.type;\n  //   clone.enum = [null];\n  // }\n\n  if (clone.oneOf?.some((s) => s.type === 'null')) {\n    const notNullableItems = clone.oneOf.filter((s) => s.type !== 'null');\n    clone.nullable = true;\n    clone.oneOf = notNullableItems;\n  }\n\n  if (clone.anyOf?.some((s) => s.type === 'null')) {\n    const notNullableItems = clone.anyOf.filter((s) => s.type !== 'null');\n    /**\n     * Convert any `anyOf` schemas with two elements, one of which is `\"type\": \"null\"`,\n     * into a single schema with nullable: true.\"\n     * @see https://github.com/turkerdev/fastify-type-provider-zod/issues/192\n     * @see https://stackoverflow.com/a/48114924\n     */\n    if (clone.anyOf.length === 2) {\n      Object.assign(\n        clone,\n        // If length is 2 it means there is only one element besides `null`\n        notNullableItems[0],\n        { nullable: true },\n      );\n      delete clone.anyOf;\n    } else {\n      clone.nullable = true;\n      // `nullable` replaces the `type: null` so replace anyOf with all other items\n      clone.anyOf = notNullableItems;\n    }\n  }\n\n  if (Array.isArray(clone.prefixItems)) {\n    const tuple = clone.prefixItems;\n\n    clone.minItems ??= tuple.length;\n    clone.maxItems ??= tuple.length;\n\n    clone.items = {\n      oneOf: tuple.map((it) =>\n        convertSchemaToOpenAPISchemaVersion(it as JSONSchema.BaseSchema, {\n          openAPISchemaVersion,\n        }),\n      ),\n    };\n\n    delete clone.prefixItems;\n  }\n\n  if ('const' in clone && clone.const !== undefined) {\n    clone.enum = [clone.const];\n    delete clone.const;\n  }\n\n  if (typeof clone.exclusiveMinimum === 'number') {\n    clone.minimum = clone.exclusiveMinimum;\n    delete clone.exclusiveMinimum;\n  }\n  if (typeof clone.exclusiveMaximum === 'number') {\n    clone.maximum = clone.exclusiveMaximum;\n    delete clone.exclusiveMaximum;\n  }\n\n  for (const key of [\n    'id',\n    '$schema',\n    '$id',\n    'unevaluatedProperties',\n    'dependentSchemas',\n    'patternProperties',\n    'propertyNames',\n    'contentEncoding',\n    'contentMediaType',\n  ]) {\n    delete clone[key];\n  }\n\n  const recursive = (v: JSONSchema.BaseSchema): unknown => {\n    if (Array.isArray(v)) {\n      return v.map((it) =>\n        convertSchemaToOpenAPISchemaVersion(it, {\n          openAPISchemaVersion,\n        }),\n      );\n    }\n    return convertSchemaToOpenAPISchemaVersion(v, { openAPISchemaVersion });\n  };\n\n  if (clone.properties) {\n    for (const [k, v] of Object.entries(clone.properties)) {\n      clone.properties[k] = convertSchemaToOpenAPISchemaVersion(\n        v as JSONSchema.BaseSchema,\n        { openAPISchemaVersion },\n      );\n    }\n  }\n\n  if (clone.items && !Array.isArray(clone.items)) {\n    // @ts-expect-error\n    clone.items = recursive(clone.items) as JSONSchema.ObjectSchema;\n  }\n\n  for (const key of [\n    'allOf',\n    'anyOf',\n    'oneOf',\n    'not',\n    'then',\n    'else',\n    'if',\n    'contains',\n  ]) {\n    if (clone[key]) {\n      clone[key] = recursive(clone[key] as JSONSchema.BaseSchema);\n    }\n  }\n\n  return clone;\n};\n"],"names":[],"mappings":"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"}